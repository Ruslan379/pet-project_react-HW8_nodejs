{"version":3,"file":"static/js/892.e8fbb79c.chunk.js","mappings":";yQACA,GAAgB,kBAAoB,4CAA4C,qBAAuB,+CAA+C,KAAO,+BAA+B,oBAAsB,4ECkC5MA,GAAMC,EAAAA,EAAAA,IAVW,CACrBC,OAAQ,0CACRC,WAAY,wCACZC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,8CAKTC,QAAQC,IAAI,OAAQT,GAEpB,IAAMU,GAAUC,EAAAA,EAAAA,IAAWX,GAKZ,SAASY,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MA8DjB,OACE,+BACE,kBAGEC,SAjEe,SAACC,GACpBA,EAAMC,iBACNX,QAAQC,IAAI,sBAAuBS,EAAME,OAAOC,QAChD,IAAMA,EAASH,EAAME,OAAOC,OAAOC,MAAM,GACzCd,QAAQC,IAAI,UAAWY,GACvBb,QAAQC,IAAI,eAAgBY,EAAOE,MAEnC,IAAMC,EAAW,IAAIC,SAErBD,EAASE,OAAO,SAAUL,GAC1Bb,QAAQC,IAAI,YAAae,GAKzB,IAAMG,EAAaN,EAAOE,KAfI,wCAiB9B,iGACQK,GAAaC,EAAAA,EAAAA,IAAInB,EAAD,kBAAqBiB,IAC3CnB,QAAQC,IAAI,cAAemB,GAKrBE,EAAO,IAAIC,KAAK,CAACV,GAAS,CAAEW,KAAM,cACxCxB,QAAQC,IAAI,QAASqB,GARvB,UAWkCG,EAAAA,EAAAA,IAAYL,EAAYP,GAX1D,cAWQa,EAXR,OAYE1B,QAAQC,IAAI,qBAAsByB,GAZpC,WAe0BC,EAAAA,EAAAA,KAAeN,EAAAA,EAAAA,IAAInB,EAAD,kBAAqBiB,KAfjE,eAeQS,EAfR,OAgBE5B,QAAQC,IAAI,qWAAwF2B,GAhBtG,kBAkBSA,GAlBT,6CAjB8B,0DAqC9BC,GAIAxB,GAASyB,EAAAA,EAAAA,IAAad,IACtBT,EAAS,YAAa,CAAEwB,SAAS,GAClC,EAmBG,WAOE,kBAAOC,UAAWC,EAAAA,UAAlB,UAEE,kBAGET,KAAK,OACLT,KAAK,cAOT,mBAEES,KAAK,SAFP,iGAYP","sources":["webpack://pet-project-react-react-hw8_nodejs/./src/pages/UploadAvatarPage/UploadAvatarPage.module.css?5cea","pages/UploadAvatarPage/UploadAvatarPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"UploadContactsBtn\":\"UploadAvatarPage_UploadContactsBtn__Jhsge\",\"AddUploadContactsBtn\":\"UploadAvatarPage_AddUploadContactsBtn__lZsmu\",\"hide\":\"UploadAvatarPage_hide__gj4eW\",\"TotalUploadContacts\":\"UploadAvatarPage_TotalUploadContacts__i2bU3\"};","// import axios from 'axios';\n// import { useState } from 'react';\n// import { useEffect } from 'react';\n\n// import { useDispatch, useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from \"react-router-dom\";\n\nimport { changeAvatar } from 'redux/auth/authOperations';\n// import { getUploadContacts } from 'redux/uploadContacts/uploadContactsSelectors';\n// import { selectLoading, selectAllContacts, getUploadContacts } from 'redux/contacts/contactsSelectors';\n\n// import { Container } from 'components/Container/Container';\n// import { Loader } from 'components/Loader/Loader';\n// import { UploadContactsList } from 'components/UploadContactsList/UploadContactsList';\n\nimport css from './UploadAvatarPage.module.css';\n\n//!  +++++++++++++++++++ firebase ++++++++++++++++++++++++++++\nimport { initializeApp } from \"firebase/app\";\nimport { getStorage } from \"firebase/storage\";\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAJCkgGuoopUtogXXP5uwOnsJ29-UCECiY\",\n  authDomain: \"contacts-book-backend.firebaseapp.com\",\n  projectId: \"contacts-book-backend\",\n  storageBucket: \"contacts-book-backend.appspot.com\",\n  messagingSenderId: \"328355692785\",\n  appId: \"1:328355692785:web:a473dcce1b45a071456950\"\n};\n\n//! Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconsole.log(\"app:\", app);//!\n\nconst storage = getStorage(app);\n//!  +++++++++++++++++++ firebase ++++++++++++++++++++++++++++\n\n\n//----------------------------------------------------------------------\nexport default function UploadAvatarPage() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"event.target.image:\", event.target.avatar); //!\n    const avatar = event.target.avatar.files[0];\n    console.log(\"avatar:\", avatar); //!\n    console.log(\"avatar.name:\", avatar.name); //!\n\n    const formData = new FormData();\n    // data.append('avatar', avatar, avatar.name);\n    formData.append('avatar', avatar);\n    console.log(\"formData:\", formData); //!\n\n\n    //!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    //! Отправка АВАТАР на Storage\n    const avatarName = avatar.name;\n\n    async function uploadAvatarDownloadURLfirebaseStorage() {\n      const storageRef = ref(storage, `avatars/${avatarName}`);\n      console.log(\"storageRef:\", storageRef); //!\n\n      // const blob = new Blob([formData], { type: 'image/png' }); //! так НЕ работает\n      // const blob = new Blob(formData, { type: 'image/jpeg' }); //! так НЕ работает\n      // const blob = await formData.blob(); //! TypeError: formData.blob is not a function\n      const blob = new Blob([avatar], { type: 'image/png' });\n      console.log(\"blob:\", blob); //!\n\n      // const uploadBytesAvatar = await uploadBytes(storageRef, blob); //* так тоже работает\n      const uploadBytesAvatar = await uploadBytes(storageRef, avatar);\n      console.log(\"uploadBytesAvatar:\", uploadBytesAvatar); //!\n\n      //! Получение АБСОЛЮТНОЙ ссылки на на АВАТАР\n      const avatarURL = await getDownloadURL(ref(storage, `avatars/${avatarName}`));\n      console.log(\"АСОЛЮТНЫЙ (ПОЛНЫЙ) путь к новому Jimp-файлу аватара в папке назначения -> avatarURL:\", avatarURL); //!;\n\n      return avatarURL;\n    };\n    uploadAvatarDownloadURLfirebaseStorage();\n    //!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n\n    dispatch(changeAvatar(formData));\n    navigate(\"/contacts\", { replace: true });\n  };\n\n\n\n  // const form = document.getElementById(\"form\");\n  // form.addEventListener(\"submit\", function (event) {\n  //   event.preventDefault();\n  //   const { image } = this.elements;\n  //   console.log(\"image.value ==>\", image.value); //!\n  //   console.log(\"image.files[0] ==>\", image.files[0]); //!\n  //   const data = new FormData();\n  //   data.append(\"image\", image.files[0]);\n  //   console.log(\"data:\", data); //!\n  // })\n\n\n\n  return (\n    <>\n      <form\n        // id=\"form\"\n        // className={css.Form}\n        onSubmit={handleSubmit}\n      // encType=\"multipart/form-data\"\n      >\n\n        <label className={css.FormLabel}\n        >\n          <input\n            // className={css.FormInput}\n            // id=\"inputImage\"\n            type=\"file\"\n            name=\"avatar\"\n          // multiple\n          // required\n          />\n        </label>\n        {/* <br /> */}\n\n        <button\n          // className={css.FormBtn}\n          type=\"submit\"\n        // disabled={isLoading}\n        >\n          Отправить файл\n        </button>\n      </form>\n\n      {/* <ToastContainer autoClose={1500} theme={\"colored\"} /> */}\n    </>\n  );\n}\n"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","console","log","storage","getStorage","UploadAvatarPage","dispatch","useDispatch","navigate","useNavigate","onSubmit","event","preventDefault","target","avatar","files","name","formData","FormData","append","avatarName","storageRef","ref","blob","Blob","type","uploadBytes","uploadBytesAvatar","getDownloadURL","avatarURL","uploadAvatarDownloadURLfirebaseStorage","changeAvatar","replace","className","css"],"sourceRoot":""}